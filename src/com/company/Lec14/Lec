package com.company.Lec14;

public class N_Queen {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		N_Queen(4, new boolean[4][4], 0);

	}

	public static void N_Queen(int n, boolean[][] board, int row) {
		// +ve base case
		if (n == 0) {
			Display(board);
			return;
		}
		// -ve base case
		if (row >= board.length) {
			return;
		}
		// work
		for (int col = 0; col < board.length; col++) { // 
			if (issafe(board, row, col)) {
				board[row][col] = true;
				N_Queen(n - 1, board, row + 1);
				board[row][col] = false;
			}

		}

	}

	public static boolean issafe(boolean[][] board, int row, int col) {
		// TODO Auto-generated method stub
		// row
		int r = row - 1;
		while (r >= 0) {
			if (board[r][col]) {
				return false;
			}
			r--;
		}
		// col
//		int c = col - 1;
//		while (c >= 0) {
//			if (board[row][c]) {
//				return false;
//			}
//			c--;
//		}
		// left diagonal
		r = row - 1;
		int c = col - 1;
		while (r >= 0 && c >= 0) {
			if (board[r][c]) {
				return false;
			}
			r--;
			c--;

		}
		// right diagonal
		r = row - 1;
		c = col + 1;
		while (r >= 0 && c < board[0].length) {
			if (board[r][c]) {
				return false;
			}
			r--;
			c++;

		}
		return true;
	}

	public static void Display(boolean[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}
	public static void N_Queen2(int n, boolean[][] board, int row,int col ) {
		// +ve base case
		if (n == 0) {
			Display(board);
			return;
		}
		if(col==board.length) {
			N_Queen2(n, board, row+1, 0);
			return;
		}
		// -ve base case
		if (row >= board.length) {
			return;
		}
		// work
		
			if (issafe(board, row, col)) {
				board[row][col] = true;
				N_Queen2(n - 1, board, row,col+1); 
				board[row][col] = false;
			}

		

	}
	

}
// Sudoku

public class Sudoku {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[][] = { { 3, 0, 6, 5, 0, 8, 4, 0, 0 }, { 5, 2, 0, 0, 0, 0, 0, 0, 0 }, { 0, 8, 7, 0, 0, 0, 0, 3, 1 },
				{ 0, 0, 3, 0, 1, 0, 0, 8, 0 }, { 9, 0, 0, 8, 6, 3, 0, 0, 5 }, { 0, 5, 0, 0, 9, 0, 6, 0, 0 },
				{ 1, 3, 0, 0, 0, 0, 2, 5, 0 }, { 0, 0, 0, 0, 0, 0, 0, 7, 4 }, { 0, 0, 5, 2, 0, 6, 3, 0, 0 } };
		System.out.println("\n" + Sudoku(arr, 0, 0));

	}

	public static boolean Sudoku(int[][] board, int row, int col) {
		if (row == 9) {
			Display(board);
			return true;
		}

		// row ++
		if (col == 9) {
			return Sudoku(board, row + 1, 0);

		}
		if (board[row][col] != 0) {
			return Sudoku(board, row, col + 1);

		} else {
			for (int val = 1; val <= 9; val++) { // 1 to 9
				if (issafe(board, row, col, val)) { //
					board[row][col] = val;
					boolean ans = Sudoku(board, row, col + 1);
					if (ans) {
						return ans;
					}
					board[row][col] = 0;
				}

			}
		}
		return false;

	}

	public static boolean issafe(int[][] board, int row, int col, int val) {
		// TODO Auto-generated method stub
		// row
		for (int c = 0; c < board.length; c++) {
			if (board[row][c] == val) {
				return false;
			}

		}
		// col
		for (int r = 0; r < board.length; r++) {
			if (board[r][col] == val) {
				return false;
			}

		}
		// 3*3
		int r = row - row % 3;
		int c = col - col % 3;
		for (int i = r; i < r + 3; i++) {
			for (int j = c; j < c + 3; j++) {
				if (board[i][j] == val) {
					return false;
				}

			}

		}
		return true;
	}

	public static void Display(int[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {
				System.out.print(board[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}

}
