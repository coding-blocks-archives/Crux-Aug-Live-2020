
public class FirstandLast {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = { 1, 2, 2, 3, 3, 3, 3, 3, 3, 6, 8, 9 };
		System.out.println("Hey");
	System.out.println(First_Occ(arr, 3) + " " + Last_Occ(arr, 3));

	}

	public static int First_Occ(int[] arr, int item) {
		System.out.println("jey");
		int lo = 0;
		int hi = arr.length - 1;
		int ans = -1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			
			if (arr[mid] == item) {
				ans = mid;
				System.out.println(ans);
				hi = mid - 1;
			} else if (arr[mid] > item) {
				hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		System.out.println(ans);
		return ans;

	}

	public static int Last_Occ(int[] arr, int item) {
		int lo = 0;
		int hi = arr.length - 1;
		int ans = -1;
		while (lo <= hi) {
			int mid = (lo + hi) / 2;
			if (arr[mid] == item) {
				ans = mid;
				lo = mid + 1;
			} else if (arr[mid] > item) {
				hi = mid - 1;
			} else {
				lo = mid + 1;
			}
		}
		return ans;

	}
}



import java.util.Arrays;

public class Merge_Two_SortedArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr1 = { 10, 20, 30, 40 };
//		int[] arr2 = { 5, 15, 25, 30 };
		int[] arr3 = { 7, 9, 2, 3, 90 };
//		int[] merge = merge(arr1, arr2);
//		System.out.println(Arrays.toString(merge));
		arr3 = mergesort(arr3, 0, arr3.length - 1);
		System.out.println(Arrays.toString(arr3));

	}

	public static int[] mergesort(int arr[], int si, int ei) {
		if (si == ei) {
			int[] bs = new int[1];
			bs[0] = arr[si];
			return bs;
		}
		int mid = (si + ei) / 2; // mid
		int[] fh = mergesort(arr, si, mid);
		int[] sh = mergesort(arr, mid + 1, ei);
		return merge(fh, sh);

	}

	public static int[] merge(int arr1[], int arr2[]) {
		int[] mergearray = new int[arr1.length + arr2.length];
		int i = 0;
		int j = 0;
		int k = 0;
		while (i < arr1.length && j < arr2.length) {
			if (arr1[i] < arr2[j]) {
				mergearray[k] = arr1[i];
				i++;
				k++;
			} else {
				mergearray[k] = arr2[j];
				j++;
				k++;
			}

		}
		if (i == arr1.length) {
			while (j < arr2.length) {
				mergearray[k] = arr2[j];
				k++;
				j++;
			}
		}
		if (j == arr2.length) {
			while (i < arr1.length) {
				mergearray[k] = arr1[i];
				k++;
				i++;
			}
		}
		return mergearray;

	}

}



import java.util.Arrays;

public class Quicksort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr3 = { 7, 9, 2, 3, 90 };
//		int[] merge = merge(arr1, arr2);
//		System.out.println(Arrays.toString(merge));
		QuickSort(arr3, 0, arr3.length - 1);
		System.out.println(Arrays.toString(arr3));
	}

	public static void QuickSort(int[] arr, int si, int ei) {
		if (si >= ei) {
			return;
		}

		int p = Pivot_Index(arr, si, ei); // 0
		QuickSort(arr, si, p - 1);// 0 - -1 base case
		QuickSort(arr, p + 1, ei);// 1 3

	}

	public static int Pivot_Index(int arr[], int si, int ei) {
		int pivot = arr[ei]; // element
		int pi = si;
		for (int i = si; i < ei; i++) {
			if (arr[i] <= pivot) {
				int tem = arr[i];
				arr[i] = arr[pi];
				arr[pi] = tem;
				pi++;
			}
		}
		int tem = arr[ei];
		arr[ei] = arr[pi];
		arr[pi] = tem;
		return pi;

	}

}
